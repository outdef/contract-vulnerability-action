name: "Contract Vulnerability Detection"
description: "Run Echidna, Slither and Mythril on smart contracts"

branding:
  icon: "shield"
  color: "purple"

inputs:
  workdir:
    description: "Path to run action from. Note that `files`, `target`, `slither-config`, `mythril-contract`,  and `config` are relative to this path"
    required: false
  files:
    description: "Solidity files to analyze"
    required: true
  echidna-contract:
    description: "Contracts to analyze (comma-separated list) by Echidna"
    required: false
  echidna-config:
    description: "Config file for echidna (CLI arguments override config options)"
    required: false
  format:
    description: "Output format: json, text, none. Disables interactive UI"
    required: false
  corpus-dir:
    description: "Directory to store corpus and coverage data"
    required: false
  test-mode:
    description: "Type of tests to be performed"
    required: false
  multi-abi:
    description: "Use multi-abi mode of testing"
    required: false
  test-limit:
    description: "Number of sequences of transactions to generate during testing"
    required: false
  shrink-limit:
    description: "Number of tries to attempt to shrink a failing sequence of transactions"
    required: false
  seq-len:
    description: "Number of transactions to generate during testing"
    required: false
  contract-addr:
    description: "Address to deploy the contract to test"
    required: false
  deployer:
    description: "Address of the deployer of the contract to test"
    required: false
  sender:
    description: "Addresses to use for the transactions sent during testing"
    required: false
  seed:
    description: "Run with a specific seed"
    required: false
  crytic-args:
    description: "Additional arguments to use in crytic-compile for the compilation of the contract to test"
    required: false
  solc-args:
    description: "Additional arguments to use in solc for the compilation of the contract to test"
    required: false
  solc-version:
    description: "Version of the Solidity compiler to use"
    required: false
  output-file:
    description: "Capture echidna's output into this file. The path must be relative to the repository root."
    required: false
  negate-exit-status:
    description: "Apply logical NOT to echidna-test's exit status (for testing the action)"
    required: false
  echidna-version:
    description: "Version of the Echidna Docker image to use"
    required: false
    default: latest
  target:
    description: "The path of the project that Slither should analyze, relative to the repo root."
    default: .
    type: string
  sarif:
    description: "If provided, the path of the SARIF file to produce, relative to the repo root."
  slither-args:
    description: "Extra arguments to pass to Slither."
  slither-config:
    description: "The path to the Slither configuration file. By default, `./slither.config.json` is used if present."
  fail-on:
    description: "Cause the action to fail if Slither finds any findings of this severity or higher. By default it will fail if any finding is found"
    default: all
    type: string
  disable-slither:
    description: "Disable Slither analysis"
    required: false
  mythril-contract:
    description: "The path of the contracts to analyze, relative to the repo root. (comma-separated list)"
    default: .
  mythril-args:
    description: "Extra arguments to pass to Mythril."
  internal-github-workspace:
    # Do not set manually. This is a hacky way to pass the host workspace to inside the action
    # This is used to improve compatibility when using ignore-compile.
    # GitHub rewrites the argument if it is passed directly, to we use toJSON to "transform"
    # it and avoid the remapping done by GitHub Actions.
    default: ${{ toJSON(github.workspace) }}

outputs:
  output-file:
    description: "If produced, the file containing echidna-test's output, relative to the repository root."
    value: ${{ steps.echidna.outputs.output-file }}
  sarif:
    description: "If produced, the path of the SARIF file, relative to the repo root."
  stdout:
    description: "Standard output from Slither. Works well when passing `--checklist` in slither-args."

runs:
  using: "composite"
  steps:
    - run: |
        # echidna-action Docker container build
        docker build -t echidna-action-image:$ECHIDNA_TAG --build-arg ECHIDNA_TAG ${{ github.action_path }}
      shell: bash
      env:
        ECHIDNA_TAG: ${{ inputs.echidna-version }}
    - id: echidna
      run: |
        # echidna campaign
        chmod +x ${{ github.action_path }}/launch.sh
        ${{ github.action_path }}/launch.sh echidna-action-image:${{ inputs.echidna-version }}
      shell: bash
      env:
        INPUT_FILES: ${{ inputs.files }}
        INPUT_CONTRACT: ${{ inputs.echidna-contract }}
        INPUT_CONFIG: ${{ inputs.echidna-config }}
        INPUT_FORMAT: ${{ inputs.format }}
        INPUT_CORPUS-DIR: ${{ inputs.corpus-dir }}
        INPUT_TEST-MODE: ${{ inputs.test-mode }}
        INPUT_MULTI-ABI: ${{ inputs.multi-abi }}
        INPUT_TEST-LIMIT: ${{ inputs.test-limit }}
        INPUT_SHRINK-LIMIT: ${{ inputs.shrink-limit }}
        INPUT_SEQ-LEN: ${{ inputs.seq-len }}
        INPUT_CONTRACT-ADDR: ${{ inputs.contract-addr }}
        INPUT_DEPLOYER: ${{ inputs.deployer }}
        INPUT_SENDER: ${{ inputs.sender }}
        INPUT_SEED: ${{ inputs.seed }}
        INPUT_CRYTIC-ARGS: ${{ inputs.crytic-args }}
        INPUT_SOLC-ARGS: ${{ inputs.solc-args }}
        INPUT_SOLC-VERSION: ${{ inputs.solc-version }}
        INPUT_OUTPUT-FILE: ${{ inputs.output-file }}
        INPUT_NEGATE-EXIT-STATUS: ${{ inputs.negate-exit-status }}
        INPUT_WORKDIR: ${{ inputs.workdir }}
        INPUT_INTERNAL-GITHUB-WORKSPACE: ${{ inputs.internal-github-workspace }}
        INPUT_TARGET: ${{ inputs.target }}
        INPUT_SARIF: ${{ inputs.sarif }}
        INPUT_FAIL-ON: ${{ inputs.fail-on }}
        INPUT_SLITHER-ARGS: ${{ inputs.slither-args }}
        INPUT_SLITHER-CONFIG: ${{ inputs.slither-config }}
        INPUT_MYTHRIL-CONTRACT: ${{ inputs.mythril-contract }}
        INPUT_MYTHRIL-ARGS: ${{ inputs.mythril-args }}
        INPUT_DISABLE-SLITHER: ${{ inputs.disable-slither }}
