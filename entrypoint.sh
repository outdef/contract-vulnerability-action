#! /bin/bash

set -e -o pipefail

OPTIONS="config format corpus-dir test-limit test-mode shrink-limit \
seq-len contract-addr deployer sender seed crytic-args solc-args"

SWITCHES="multi-abi"

get() {
  env | sed -n "s/^$1=\(.*\)/\1/;T;p"
}

compatibility_link() {
  HOST_GITHUB_WORKSPACE="$(get INPUT_INTERNAL-GITHUB-WORKSPACE | tr -d \")"
  if [[ -d "$GITHUB_WORKSPACE" ]]; then
    mkdir -p "$(dirname "$HOST_GITHUB_WORKSPACE")"
    ln -s "$GITHUB_WORKSPACE" "$HOST_GITHUB_WORKSPACE"
    echo "[-] Applied compatibility link: $HOST_GITHUB_WORKSPACE -> $GITHUB_WORKSPACE"
  fi
}

compatibility_link

CMD=(echidna-test "$INPUT_FILES")

for OPTION in $OPTIONS; do
  NAME=INPUT_"${OPTION^^}"
  VALUE="$(get "$NAME")"
  if [[ -n "$VALUE" ]]; then
    CMD+=(--"$OPTION" "$VALUE")
  fi
done

for SWITCH in $SWITCHES; do
  NAME=INPUT_"${SWITCH^^}"
  VALUE="$(get "$NAME")"
  if [[ -n "$VALUE" ]]; then
    CMD+=(--"$SWITCH")
  fi
done

echo "Echidna version: $(echidna-test --version)" >&2
echo "Echidna command line:" >&2
printf '  %s\n' "${CMD[@]}" >&2
echo >&2

SOLC_VERSION="$(get 'INPUT_SOLC-VERSION')"
if [[ -n "$SOLC_VERSION" ]]; then
  solc-select install "$SOLC_VERSION"
  solc-select use "$SOLC_VERSION"
fi

OUTPUT_FILE="$(get 'INPUT_OUTPUT-FILE')"
if [[ -n "$OUTPUT_FILE" ]]; then
  echo "::set-output name=output-file::$OUTPUT_FILE"
  exec > >(tee "$OUTPUT_FILE")
fi

WORKDIR="$(get 'INPUT_WORKDIR')"
if [[ -n "$WORKDIR" ]]; then
  cd "$WORKDIR"
fi

for CONTRACT in $(echo "$INPUT_CONTRACT" | tr ',' ' '); do
  CONTRACT_INDEX=-1
  for i in "${!CMD[@]}"; do
    if [[ "${CMD[i]}" == "--contract" ]]; then
      CONTRACT_INDEX=$i
      break
    fi
  done

  if [[ $CONTRACT_INDEX -ne -1 ]]; then
    # Remove everything after the "--contract" option
    CMD=("${CMD[@]:0:CONTRACT_INDEX}")
  fi

  CMD+=(--contract "$CONTRACT")
  echo "[-] Echidna testing contract: $CONTRACT"

  if [[ -n "$(get 'INPUT_NEGATE-EXIT-STATUS')" ]]; then
    ! "${CMD[@]}"
  else
    "${CMD[@]}"
  fi
done

random_string() {
  echo "$RANDOM $RANDOM $RANDOM $RANDOM $RANDOM" | md5sum | head -c 20
}

version_lte() {
  printf '%s\n%s\n' "$1" "$2" | sort -C -V
}

TARGET="$(get INPUT_TARGET)"
SARIFOUT="$(get INPUT_SARIF-OUTPUT)"
SLITHERARGS="$(get INPUT_SLITHER-ARGS)"
SLITHERCONF="$(get INPUT_SLITHER-CONFIG)"
STDOUTFILE="/tmp/slither-stdout"

# #19 - an user may set SOLC_VERSION in the workflow and cause problems here.
# Make sure it's unset. If you need to use a different solc version, override
# it with the `solc-version` action option.
unset SOLC_VERSION

# #49 - the user/group info may mismatch between container and host, and it
# may cause git to complain with `detected dubious ownership in repository`.
# mark everything as safe here as we don't know where the repository is (it
# might be something other than $GITHUB_WORKSPACE)

fail_on_flags() {
  INSTALLED_VERSION="$(slither --version)"
  FAIL_ON_LEVEL="$(get INPUT_FAIL-ON)"

  if [ "$FAIL_ON_LEVEL" = "config" ]; then
    return
  fi

  if version_lte "$INSTALLED_VERSION" "0.8.3"; then
    # older behavior - fail on findings by default
    case "$FAIL_ON_LEVEL" in
    low | medium | high | pedantic | all)
      echo "[!] Requested fail-on $FAIL_ON_LEVEL but it is unsupported on Slither $INSTALLED_VERSION, ignoring" >&2
      ;;
    none)
      echo "--ignore-return-value"
      ;;
    *)
      echo "[!] Unknown fail-on value $FAIL_ON_LEVEL, ignoring" >&2
      ;;
    esac
  else
    # newer behavior - does not fail on findings by default
    case "$FAIL_ON_LEVEL" in
    all | pedantic)
      # default behavior on slither >= 0.8.4
      echo "--fail-pedantic"
      ;;
    low)
      echo "--fail-low"
      ;;
    medium)
      echo "--fail-medium"
      ;;
    high)
      echo "--fail-high"
      ;;
    none)
      echo "--no-fail-pedantic"
      ;;
    *)
      echo "[!] Unknown fail-on value $FAIL_ON_LEVEL, ignoring" >&2
      ;;
    esac

  fi
}

compatibility_link
IGNORECOMPILEFLAG="--ignore-compile"

SARIFFLAG=
if [[ -n "$SARIFOUT" ]]; then
  echo "[-] SARIF output enabled, writing to $SARIFOUT."
  echo "sarif=$SARIFOUT" >>"$GITHUB_OUTPUT"
  SARIFFLAG="--sarif=$SARIFOUT"
fi

CONFIGFLAG=
if [[ -n "$SLITHERCONF" ]]; then
  echo "[-] Slither config provided: $SLITHERCONF"
  CONFIGFLAG="--config-file=$SLITHERCONF"
fi

FAILONFLAG="$(fail_on_flags)"

DISABLE_SLITHER="$(get INPUT_DISABLE-SLITHER)"

if [[ -n "$DISABLE_SLITHER" ]] && [[ $DISABLE_SLITHER != "true" ]]; then
  if [[ -z "$SLITHERARGS" ]]; then
    slither "$TARGET" $SARIFFLAG $IGNORECOMPILEFLAG $FAILONFLAG $CONFIGFLAG | tee "$STDOUTFILE"
  else
    echo "[-] SLITHERARGS provided. Running slither with extra arguments"
    printf "%s\n" "$SLITHERARGS" | xargs slither "$TARGET" $SARIFFLAG $IGNORECOMPILEFLAG $FAILONFLAG $CONFIGFLAG | tee "$STDOUTFILE"
  fi
fi

MYTHARGS="$(get INPUT_MYTHRIL-ARGS)"
MYTHCONTRACT="$(get INPUT_MYTHRIL-CONTRACT)"

for CONTRACT in $(echo "$MYTHCONTRACT" | tr ',' ' '); do
  echo "[-] Running Mythril on contract: $CONTRACT"

  if [[ -z "$MYTHARGS" ]]; then
    myth analyze "$CONTRACT" | tee -a "$STDOUTFILE"
  else
    printf "%s\n" "$MYTHARGS" | xargs myth analyze "$CONTRACT" | tee -a "$STDOUTFILE"
  fi
done
